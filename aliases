function m {
  if [ "$1" != "" ]; then
    mate $1
  else
    mate .
  fi
}

function o {
  if [ "$1" != "" ]; then
    open $1
  else
    open .
  fi
}

function p {
  cd "$MY_CODE/$1";
}

alias gs='git status -s'
alias ga='git add'
alias gaa='git add .'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias gst='git stash'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gco='git checkout'
alias gb='git branch -a'
alias gcl='git clone'
alias gpl='git pull --rebase'
alias gps='git push'
alias gpap="git pull --rebase && git push"
alias gdf='git diff'
alias gdfx='git diff | gitx'
alias gstat='git diff --stat -r'
alias glo='git log --decorate --oneline --color | head -n 15'
alias gwho='git shortlog -s'

function gc {
  if [ "$1" != "" ]; then
    git commit -a -m $1
  else
    git commit -av
  fi
}

function gcam {
  if [ "$1" != "" ]; then
    git commit -a --amend -m $1
  else
    git commit -av --amend
  fi
}

function wtc {
  git commit -am "$(curl -s http://whatthecommit.com/ | grep '<p>' | cut -c 4-)"
}

function gbra {
  branch_name=$1
  git push origin origin:refs/heads/${branch_name}
  git fetch origin
  git checkout --track -b ${branch_name} origin/${branch_name}
  git pull
}

function gbrd {
  branch_name=$1
  git branch -d ${branch_name}
  git push origin :heads/${branch_name}
}

alias rb='ruby'

alias sc='script/console'
alias ss='script/server'

alias rs='rails server'
alias rc='rails console'
alias rg='rails generate'
alias rd='rails destroy'
alias rmg='rake db:migrate db:test:clone'
alias rrmg='rake db:migrate db:migrate:redo db:test:clone'

alias ..='cd ..'
alias l='ls'
alias ls='ls -Ga'
alias ll='ls -Galh'

alias mv='mv -v'
alias cp='cp -Rv'
alias rm='rm -Rv'
alias ln='ln -v'

function tab {
  osascript -e "
    tell application \"System Events\" to tell process \"Terminal\" to keystroke \"t\" using command down
    tell application \"Terminal\" to do script \"cd \\\"$(PWD)\\\"\" in selected tab of the front window
  " > /dev/null 2>&1
}

function tabs {  
  if [ "$1" != "" ]; then
    for i in {1..$1};do;tab;done;
  else
    tab
  fi
}

function proxy {
  if [ `networksetup -getwebproxy AirPort | head -n 1 | awk '{ print $2 }'` = 'Yes' ]; then
    networksetup -setwebproxystate AirPort off
    echo "Proxy is turned off now"
  else
    networksetup -setwebproxystate AirPort on
    echo "Proxy is turned on now"
  fi
}
