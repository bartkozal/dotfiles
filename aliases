alias m='mate'
alias mo='mate .'
alias o='open .'
alias os='open -a Safari'

function pman { man -t $1 | open -a Preview -f }

function git { hub "$@" }
alias gs='git status -s'
alias ga='git add'
alias gaa='git add .'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias gc='git commit -av'
alias gcam='git commit -av --amend'
alias gst='git stash list'
alias gsta='git stash'
alias gstp='git stash pop'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gb='git branch -a'
alias gcl='git clone'
alias gpl='git pull --rebase'
alias gps='git push'
alias gpap="git pull --rebase && git push"
alias gdf='git diff'
alias gdfx='git diff | gitx'
alias gstat='git diff --stat -r'
alias glo='git log --decorate --oneline --color | head -n 15'
alias gloa='git log --graph --decorate --oneline --all'
alias gwho='git shortlog -s'

function wtc {
  git commit -am "$(curl -s http://whatthecommit.com/ | grep '<p>' | cut -c 4-)"
}

function gbra {
  branch_name=$1
  git push origin origin:refs/heads/${branch_name}
  git fetch origin
  git checkout --track -b ${branch_name} origin/${branch_name}
  git pull
}

function gbrd {
  branch_name=$1
  git branch -d ${branch_name}
  git push origin :heads/${branch_name}
}

alias rb='ruby'

alias sc='script/console'
alias ss='script/server'
alias sg='script/generate'

alias rs='rails server'
alias rc='rails console'
alias rg='rails generate'

alias spec='spec -c'
alias rspec='rspec -c'

alias ..='cd ..'
alias l='ls'
alias ls='ls -Ga'
alias ll='ls -Galh'

alias mv='mv -v'
alias cp='cp -Rv'
alias rm='rm -Rv'
alias ln='ln -v'

function clean {
  find . -depth -name "$1" -exec rm '{}' \; -print
}

function newtab {
  osascript -e "
    tell application \"System Events\" to tell process \"Terminal\" to keystroke \"t\" using command down
    tell application \"Terminal\" to do script \"cd \\\"$(PWD)\\\"\" in selected tab of the front window
  " > /dev/null 2>&1
}

function proxy {
  if [ `networksetup -getwebproxy AirPort | head -n 1 | awk '{ print $2 }'` = 'Yes' ]; then
    networksetup -setwebproxystate AirPort off
    echo "Proxy is turned off now"
  else
    networksetup -setwebproxystate AirPort on
    echo "Proxy is turned on now"
  fi
}

